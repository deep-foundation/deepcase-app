name: Build And Publish Reusable Workflow

on:
  workflow_call:
    inputs:
      app-name:
        type: string
        required: true
      install-electron-dependencies-command:
        type: string
        required: false
        default: cd electron && npm ci
      migrations-hasura-path:
        type: string
        required: false
        default: localhost:8080
      migrations-hasura-ssl:
        type: number
        required: false
        default: 0
      migrations-hasura-secret:
        type: string
        required: false
        default: myadminsecretkey
      next-public-deeplinks-server-url:
        type: string
        required: false
        default: http://localhost:3007
      next-public-gql-path:
        type: string
        required: false
        default: localhost:3006/gql
      next-public-gql-ssl:
        type: number
        required: false
        default: 0
      deeplinks-hasura-path:
        type: string
        required: false
        default: localhost:8080
      deeplinks-hasura-ssl:
        type: number
        required: false
        default: 0
      migrations-deeplinks-app-url:
        type: string
        required: false
        default: http://host.docker.internal:3007
      migrations-deeplinks-url:
        type: string
        required: false
        default: http://host.docker.internal:3006
    secrets:
      csc-key-password:
        required: true
      csc-link:
        required: true
      appleid:
        required: true
      appleidpass:
        required: true

jobs:
  get-app-version:
    name: Get App Version
    runs-on: ubuntu-latest
    outputs:
      app-version: ${{steps.get-app-version.outputs.current-version}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get NPM Version
        id: get-app-version
        uses: martinbeentjes/npm-get-version-action@main

  sync-electron-app-version:
    name: Sync Electron App Version
    needs: get-app-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Sync
        run: npx --yes tsx ./automation/sync-electron-app-version.ts
      - name: Commit and push
        run: |
          if [[ $(git status -s) ]]; then
            # Changes are present
            # Stage all changes
            git config --local user.email "freephoenix888@gmail.com"
            git config --local user.name "FreePhoenix888"
            git add electron/package.json
            git commit -m "Sync electron package version"
            git push origin main
          else
            # No changes in the working directory
            echo "No changes in the working directory."
          fi

  build:
    runs-on: ubuntu-latest
    needs: 
      - get-app-version
      - sync-electron-app-version
    outputs:
      app-version: ${{ needs.get-app-version.outputs.app-version }}
      os: ${{ matrix.os }}
    strategy:
      matrix:
        os: [linux, mac, windows, android]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull changes made by sync-electron-app-version
        run: git pull

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm clean-install

      - name: Install electron dependencies
        run: ${{ inputs.install-electron-dependencies-command }}

      - name: Build
        run: npm run build

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: electron/dist

  release:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.os }}
          path: electron/dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.app-version }}
          release_name: Release ${{ needs.build.outputs.app-version }}
          body: ${{ needs.build.outputs.app-version }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: electron/dist/${{ inputs.app-name }}.tar.gz
          asset_name: linux-${{ inputs.app-name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: electron/dist/${{ inputs.app-name }}.zip
          asset_name: windows-${{ inputs.app-name }}.zip
          asset_content_type: application/zip

      - name: Upload Mac Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: electron/dist/${{ inputs.app-name }}.app.zip
          asset_name: mac-${{ inputs.app-name }}.zip
          asset_content_type: application/zip

      - name: Upload Android Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android/app/build/outputs/apk/release/app-release-unsigned.apk
          asset_name: ${{ inputs.app-name }}-android.apk
          asset_content_type: application/zip